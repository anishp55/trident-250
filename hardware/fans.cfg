#####################################################################
#   Fan Control
#####################################################################

##  Controller fan - FAN2
[controller_fan skirt_fans]
pin: PD12
kick_start_time: 0.5
heater: heater_bed
fan_speed: 0.1                 ; set skirt fans to 30% because LDO fans are loud. Maybe replace with 4 Noctua or Artic

#[fan_generic chamber_exhaust]
# 80mm Fan - FAN3
#pin: PD13
#max_power: 1
#shutdown_speed: 1 # If MCU Errors out, kick up the fan to pull heat/smoke outside
#cycle_time:
#hardware_pwm:
#kick_start_time: 0.5
#off_below: 0.0
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:

############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.4		# Fan speed once bed temp is reached  
variable_slow: 0.2		# Fan speed while bed is heating
gcode:

########## Bed Fans #########

[fan_generic Bed_Fans]
# FAN4
pin: PD14
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=Bed_Fans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=Bed_Fans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=Bed_Fans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}

################ Control Exhaust Fans with Macros #################

[gcode_macro CHAMBER_FAN_ON]
description: Turn on the chamber fan.
gcode:
  M118 ** Running CHAMBER_FAN_ON macro
  SET_FAN_SPEED FAN=chamber_exhaust SPEED=1

[gcode_macro CHAMBER_FAN_OFF]
description: Turn off the chamber fan.
gcode:
  M118 ** Running CHAMBER_FAN_OFF macro
  SET_FAN_SPEED FAN=chamber_exhaust SPEED=0

[gcode_macro CHAMBER_FAN_10]
description: Turn on the chamber fan at 10%.
gcode:
  M118 ** Running CHAMBER_FAN_10 macro
  SET_FAN_SPEED FAN=chamber_exhaust SPEED=0.1

[gcode_macro START_FAN_TIMER]
gcode:
  M118 ** Running START_FAN_TIMER macro
  {% set time = params.TIME|default(600)|float %}
  UPDATE_DELAYED_GCODE ID=STOP_FAN DURATION={time}
  M118 Chamber fan timer starting

[delayed_gcode STOP_FAN]
gcode:
  M118 ** Running STOP_FAN macro
  CHAMBER_FAN_OFF
  TOGGLE_NEVERMORE
  M118 Chamber Fan Stopped

[gcode_macro CANCEL_FAN_TIMER]
gcode:
  M118 ** Running CANCEL_FAN_TIMER macro
  UPDATE_DELAYED_GCODE ID=STOP_FAN DURATION=0

########################## Nevermore #########################

## This is a simple include for the Nevermore. To use it with your printer, edit
## the pin definition in line 16 so it matches your printer.
## What you get:
## - a generic fan "Nevermore" which is adjustable in GCODE and in Mainsail/Fluidd
## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
## - a Macro to turn the fan off some time after the print.
##
## Slicer integration: Add "SET_FAN_SPEED FAN=Nevermore SPEED=1" in your start-macro
## (or less fan depending on your needs, like SPEED=0.8)
## in your end print code, add "UPDATE_DELAYED_GCODE ID=filter_off DURATION=180"
## this keeps your Nevermore running for 180s after the print finishes to clean the chamber a bit more.

[fan_generic Nevermore]
## Nevermore - FAN0 on Octopus
pin: PA8
#[menu __main __control __nevermoreonoff]
#type: command
#name: Nevermore {'ON' if printer['fan_generic Nevermore'].speed > 0 else 'OFF'}
#enable: {'fan_generic Nevermore' in printer}
#gcode:
#    TOGGLE_NEVERMORE

#[menu __main __control __filterspeed]
#type: input
#enable: {'fan_generic Nevermore' in printer}
#name: Filter %: {'%3d' % (menu.input*100)}%
#input: {printer["fan_generic Nevermore"].speed}
#input_min: 0
#input_max: 1
#input_step: 0.1
#gcode:
#    SET_FAN_SPEED FAN=Nevermore SPEED={menu.input}

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=1
    {% endif %}