#########################################################################################################################################################################################################################
# Macro to check full movement on all axes or to warm up your printer
# EXAMPLE: RUN_IN MOVE_X_MIN=10 MOVE_X_MAX=240 MOVE_Y_MIN=10 MOVE_Y_MAX=240 MOVE_Z_MIN=10 MOVE_Z_MAX=240 CIRCLES=5
# If _MIN less 10 or _MAX higher than maximum - 10 then a safety offset of 10 is applied to all moves
# add this to the start gcode before PRINT_START in your slicer (SuperSlicer or PrusaSlicer) to do it only where the print will be located:
# RUN_IN MOVE_X_MIN={first_layer_print_min[0]} MOVE_X_MAX={first_layer_print_max[0]} MOVE_Y_MIN={first_layer_print_min[1]} MOVE_Y_MAX={first_layer_print_max[1]} MOVE_Z_MAX={total_layer_count * layer_height} CIRCLES=10
#########################################################################################################################################################################################################################

[gcode_macro RUN_IN]
description: start a run-in sequence to see if all axes moves freely to its maximum. Good to add some lubricant to the z-spindles. Can be customized with CIRCLES and SPEED(mm/s) parameter
gcode:
    {% if not 'XYZ' in printer.toolhead.homed_axes %}
      { action_respond_info("Axes not homed, perfoming full homing")}
      G28
    {% endif %}
    # define the safe offset to min and max value
    {% set x_safe = 10 %}
    {% set y_safe = 10 %}
    {% set z_safe = 10 %}
    # get printer min and max movement
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_min"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set min_z = printer.configfile.config["stepper_z"]["position_min"]|float %}
    # parse the move params or use default if not given
    {% set move_x_min = params.MOVE_X_MIN|default(min_x)|float %}
    {% set move_x_max = params.MOVE_X_MAX|default(max_x)|float %}
    {% set move_y_min = params.MOVE_Y_MIN|default(min_y)|float %}
    {% set move_y_max = params.MOVE_Y_MAX|default(max_y)|float %}
    {% set move_z_min = params.MOVE_Z_MIN|default(min_z)|float %}
    {% set move_z_max = params.MOVE_Z_MAX|default(max_z)|float %}
    # define safe moves
    {% set move_x_min_safe = move_x_min + x_safe %}
    {% set move_x_max_safe = move_x_max - x_safe %}
    {% set move_y_min_safe = move_y_min + y_safe %}
    {% set move_y_max_safe = move_y_max - y_safe %}
    {% set move_z_min_safe = move_z_min + z_safe %}
    {% set move_z_max_safe = move_z_max - z_safe %}
    # parse speed or use max_velocity if not given
    {% set max_v = printer.configfile.config["printer"]["max_velocity"]|float %}
    # parse circles or use default if not given
    {% set circles_count = params.CIRCLES|default(1)|int %}
    # set speed
    {% set speed = params.SPEED|default(max_v)|int %}
    # Convert speed from mm/s to mm/min
    {% set velocity = speed * 60 %}
    # Move z to safe position
    G0 Z{move_z_min_safe} F3000
    # look if all moves are inside of the safe values
    {% if move_x_min > min_x + x_safe and move_x_max < max_x - x_safe and move_y_min > min_y + y_safe and move_y_max < max_y - y_safe and move_z_min > min_z + z_safe and move_z_max < max_z - z_safe %}
      { action_respond_info("All moves safe")}
      {% for circles in range(circles_count) %}
        G0 Z{move_z_max} F{velocity}
        G0 X{move_x_min} Y{move_y_min}
        G0 X{move_x_max} Y{move_y_min}
        G0 X{move_x_max} Y{move_y_max}
        G0 X{move_x_min} Y{move_y_max}
        G0 Z{move_z_min}
      {% endfor %}
    # if not, use the safe moves
    {% else %}
      { action_respond_info("All moves using safe offset")}
      {% for circles in range(circles_count) %}
        G0 Z{move_z_max_safe} F{velocity}
        G0 X{move_x_min_safe} Y{move_y_min_safe}
        G0 X{move_x_max_safe} Y{move_y_min_safe}
        G0 X{move_x_max_safe} Y{move_y_max_safe}
        G0 X{move_x_min_safe} Y{move_y_max_safe}
        G0 Z{move_z_min_safe}
      {% endfor %}
    {% endif %}
    # Park the head in the middle of the bed
    G0 X{max_x/2} Y{max_y/2} Z{move_z_min_safe}